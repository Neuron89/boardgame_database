{"ast":null,"code":"var _jsxFileName = \"/home/neuron/projects/boardgame_database/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GameList from './components/GameList';\nimport AddGameForm from './components/AddGameForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [games, setGames] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n\n  // Fetch all games from the database\n  // Add this at the top of your file\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  const fetchGames = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/boardgames`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch games');\n      }\n      const data = await response.json();\n      setGames(data);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n\n  // Load games when component mounts\n  useEffect(() => {\n    fetchGames();\n  }, []);\n\n  // Handle search\n  const handleSearch = async term => {\n    setSearchTerm(term);\n    try {\n      const response = await fetch(`${API_URL}/api/boardgames/search?term=${encodeURIComponent(term)}`);\n      if (!response.ok) {\n        throw new Error('Failed to search games');\n      }\n      const data = await response.json();\n      setGames(data);\n    } catch (error) {\n      console.error('Error searching games:', error);\n    }\n  };\n\n  // Handle deleting a game\n  const handleDeleteGame = async gameId => {\n    try {\n      console.log('Attempting to delete game with ID:', gameId);\n      const response = await fetch(`${API_URL}/api/boardgames/${gameId}`, {\n        method: 'DELETE'\n      });\n      const data = await response.json();\n      console.log('Server response:', data);\n      if (!response.ok) {\n        throw new Error(`Failed to delete game: ${data.error || 'Unknown error'}`);\n      }\n      console.log('Game deleted successfully');\n      // Refresh the games list after deletion\n      await fetchGames();\n    } catch (error) {\n      console.error('Error deleting game:', error);\n      alert('Failed to delete game. Please try again.');\n    }\n  };\n\n  // Handle adding new game\n  const handleAddGame = async newGame => {\n    try {\n      console.log('Sending new game data:', newGame); // Debug log\n\n      // Parse the players and time values safely\n      let minPlayers, maxPlayers, playingTime;\n      try {\n        minPlayers = newGame.players ? parseInt(newGame.players.split('-')[0]) : null;\n        maxPlayers = newGame.players ? parseInt(newGame.players.split('-')[1]) : null;\n        playingTime = newGame.time ? parseInt(newGame.time.split('-')[0]) : null;\n      } catch (parseError) {\n        console.error('Error parsing numeric values:', parseError);\n        minPlayers = null;\n        maxPlayers = null;\n        playingTime = null;\n      }\n      const gameData = {\n        name: newGame.title,\n        description: newGame.description || '',\n        min_players: minPlayers,\n        max_players: maxPlayers,\n        playing_time: playingTime,\n        year_published: null,\n        // Add if you have this field\n        publisher: '',\n        // Add if you have this field\n        image_url: newGame.image || '',\n        complexity: newGame.complexity || '',\n        date_added: new Date().toISOString().split('T')[0]\n      };\n      console.log('Formatted game data:', gameData); // Debug log\n\n      const response = await fetch(`${API_URL}/api/boardgames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(gameData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add game');\n      }\n      const savedGame = await response.json();\n      console.log('Server response:', savedGame);\n\n      // Refresh the games list after adding\n      await fetchGames();\n      console.log('Updated games list:', games);\n      setShowAddForm(false);\n    } catch (error) {\n      console.error('Error adding game:', error);\n      alert('Failed to add game. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Boardgame Database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-button\",\n        onClick: () => setShowAddForm(true),\n        children: \"Add Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), showAddForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(AddGameForm, {\n          onSubmit: handleAddGame,\n          onCancel: () => setShowAddForm(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GameList, {\n      games: games,\n      onDeleteGame: handleDeleteGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qp1m5ecks+2rdLCA7eR9JCuZagA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","GameList","AddGameForm","jsxDEV","_jsxDEV","App","_s","games","setGames","searchTerm","setSearchTerm","showAddForm","setShowAddForm","API_URL","process","env","REACT_APP_API_URL","fetchGames","response","fetch","ok","Error","data","json","error","console","handleSearch","term","encodeURIComponent","handleDeleteGame","gameId","log","method","alert","handleAddGame","newGame","minPlayers","maxPlayers","playingTime","players","parseInt","split","time","parseError","gameData","name","title","description","min_players","max_players","playing_time","year_published","publisher","image_url","image","complexity","date_added","Date","toISOString","headers","body","JSON","stringify","savedGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onClick","onSubmit","onCancel","onDeleteGame","_c","$RefreshReg$"],"sources":["/home/neuron/projects/boardgame_database/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GameList from './components/GameList';\nimport AddGameForm from './components/AddGameForm';\nimport './App.css';\n\nfunction App() {\n  const [games, setGames] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n\n  // Fetch all games from the database\n  // Add this at the top of your file\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  \n  const fetchGames = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/boardgames`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch games');\n      }\n      const data = await response.json();\n      setGames(data);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n\n  // Load games when component mounts\n  useEffect(() => {\n    fetchGames();\n  }, []);\n\n  // Handle search\n  const handleSearch = async (term) => {\n    setSearchTerm(term);\n    try {\n      const response = await fetch(`${API_URL}/api/boardgames/search?term=${encodeURIComponent(term)}`);\n      if (!response.ok) {\n        throw new Error('Failed to search games');\n      }\n      const data = await response.json();\n      setGames(data);\n    } catch (error) {\n      console.error('Error searching games:', error);\n    }\n  };\n\n  // Handle deleting a game\n  const handleDeleteGame = async (gameId) => {\n    try {\n      console.log('Attempting to delete game with ID:', gameId);\n      \n      const response = await fetch(`${API_URL}/api/boardgames/${gameId}`, {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n      console.log('Server response:', data);\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete game: ${data.error || 'Unknown error'}`);\n      }\n\n      console.log('Game deleted successfully');\n      // Refresh the games list after deletion\n      await fetchGames();\n    } catch (error) {\n      console.error('Error deleting game:', error);\n      alert('Failed to delete game. Please try again.');\n    }\n  };\n\n  // Handle adding new game\n  const handleAddGame = async (newGame) => {\n    try {\n      console.log('Sending new game data:', newGame); // Debug log\n      \n      // Parse the players and time values safely\n      let minPlayers, maxPlayers, playingTime;\n      try {\n        minPlayers = newGame.players ? parseInt(newGame.players.split('-')[0]) : null;\n        maxPlayers = newGame.players ? parseInt(newGame.players.split('-')[1]) : null;\n        playingTime = newGame.time ? parseInt(newGame.time.split('-')[0]) : null;\n      } catch (parseError) {\n        console.error('Error parsing numeric values:', parseError);\n        minPlayers = null;\n        maxPlayers = null;\n        playingTime = null;\n      }\n\n      const gameData = {\n        name: newGame.title,\n        description: newGame.description || '',\n        min_players: minPlayers,\n        max_players: maxPlayers,\n        playing_time: playingTime,\n        year_published: null, // Add if you have this field\n        publisher: '', // Add if you have this field\n        image_url: newGame.image || '',\n        complexity: newGame.complexity || '',\n        date_added: new Date().toISOString().split('T')[0]\n      };\n\n      console.log('Formatted game data:', gameData); // Debug log\n\n      const response = await fetch(`${API_URL}/api/boardgames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(gameData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to add game');\n      }\n\n      const savedGame = await response.json();\n      console.log('Server response:', savedGame);\n\n      // Refresh the games list after adding\n      await fetchGames();\n      console.log('Updated games list:', games);\n      setShowAddForm(false);\n    } catch (error) {\n      console.error('Error adding game:', error);\n      alert('Failed to add game. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Boardgame Database</h1>\n      <div className=\"controls\">\n        <SearchBar onSearch={handleSearch} />\n        <button \n          className=\"add-button\"\n          onClick={() => setShowAddForm(true)}\n        >\n          Add Game\n        </button>\n      </div>\n      \n      {showAddForm && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <AddGameForm \n              onSubmit={handleAddGame}\n              onCancel={() => setShowAddForm(false)}\n            />\n          </div>\n        </div>\n      )}\n\n      <GameList games={games} onDeleteGame={handleDeleteGame} />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}